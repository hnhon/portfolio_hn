{"version":3,"sources":["Navbar.js","About.js","Portfolio.js","Contact.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","About","id","Portfolio","title","content","tech","link","map","el","target","rel","Contact","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iLAmBeA,MAhBf,WACI,OACI,6BACI,yBAAKC,UAAU,OACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,SACX,kBAAC,IAAD,CAAYC,KAAK,UAAjB,SACA,kBAAC,IAAD,CAAYA,KAAK,cAAjB,aACA,kBAAC,IAAD,CAAYA,KAAK,YAAjB,gBCCTC,MATf,WACI,OACI,yBAAKC,GAAG,QAAQH,UAAU,UACtB,0CACA,kKAAuI,kBAAC,IAAD,CAAYC,KAAK,YAAjB,gBAAvI,OCyEGG,MA9Ef,WAmDI,OACI,yBAAKJ,UAAU,YAAYG,GAAG,aAC1B,yCACA,yBAAKH,UAAU,SArDP,CACZ,CACIK,MAAO,iBACPC,QAAS,6FACTC,KAAM,CAAC,oCAAqC,mCAC5CC,KAAM,yCAEV,CACIH,MAAO,iBACPC,QAAS,qDACTC,KAAM,CAAC,mEACPC,KAAM,qDAEV,CACIH,MAAO,UACPC,QAAS,yFACTC,KAAM,CAAC,wBAAyB,mCAChCC,KAAM,iDAEV,CACIH,MAAO,YACPC,QAAS,+EACTC,KAAM,CAAC,mCACPC,KAAM,yCAEV,CACIH,MAAO,aACPC,QAAS,6CACTC,KAAM,CAAC,oCAAqC,mCAC5CC,KAAM,sCAEV,CACIH,MAAO,kBACPC,QAAS,6CACTC,KAAM,CAAC,mCACPC,KAAM,uCAEV,CACIH,MAAO,mBACPC,QAAS,8CACTC,KAAM,CAAC,mCACPC,KAAM,wCAEV,CACIH,MAAO,eACPC,QAAS,WACTC,KAAM,CAAC,mCACPC,KAAM,0CAOSC,KAAI,SAAAC,GACX,OACI,yBAAKV,UAAU,QACX,yBAAKA,UAAU,cAAcU,EAAGL,OAChC,yBAAKL,UAAU,gBAAgBU,EAAGJ,SAClC,yBAAKN,UAAU,aAAaU,EAAGH,KAAKE,KAAI,SAAAC,GACpC,OACI,4BACKA,OAIb,6BACI,uBAAGT,KAAMS,EAAGF,KAAMG,OAAO,SAASC,IAAI,uBAAtC,oBCrDjBC,MAff,WACI,OACI,yBAAKV,GAAG,WACJ,4CACA,yDACA,2BACA,uBAAGF,KAAK,oCAAoCW,IAAI,sBAAsBD,OAAO,SAASX,UAAU,UAAhG,aAEA,2BACA,uBAAGC,KAAK,2BAA2BW,IAAI,sBAAsBD,OAAO,SAASX,UAAU,UAAvF,aCHGc,MANf,WACI,OACI,yBAAKX,GAAG,UAAR,uBCeOY,MAZf,WACE,OACE,yBAAKf,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCFcgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.093a235b.chunk.js","sourcesContent":["import React from 'react';\r\nimport AnchorLink from 'react-anchor-link-smooth-scroll';\r\n\r\nfunction Navbar() {    \r\n    return (\r\n        <div>\r\n            <nav className='nav'>\r\n                <div className='nav-container'>\r\n                    <div className='links'>\r\n                        <AnchorLink href='#about'>About</AnchorLink>\r\n                        <AnchorLink href='#portfolio'>Portfolio</AnchorLink>\r\n                        <AnchorLink href='#contact'>Contact</AnchorLink>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport AnchorLink from 'react-anchor-link-smooth-scroll';\r\n\r\nfunction About() {\r\n    return (\r\n        <div id='about' className='banner'>\r\n            <h2>Hiunam Hon</h2>\r\n            <p>Hi, I am a self-taught web developer. I learn by building stuffs and enjoy learning new skills from differnt projects. Feel free to <AnchorLink href='#contact'>get in touch</AnchorLink>.</p>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default About;","import React from 'react';\r\n\r\nfunction Portfolio() {\r\n    let portfolio = [\r\n        {\r\n            title: 'Weaher Checker',\r\n            content: 'A web application to inquire weather information for specific cities from Openweather API.',\r\n            tech: ['Backend: Node.Js, Experss.Js, EJS', 'Frontend: Html, CSS, JavaScript'],\r\n            link: 'https://weatherappdemo.herokuapp.com/'\r\n        }, \r\n        {\r\n            title: 'Budget Planner',\r\n            content: 'Check daily, monthly, yearly bills and plan budget',\r\n            tech: ['React, React Hooks, Context API (state management), Material UI'],\r\n            link: 'https://condescending-volhard-b5788d.netlify.app/'\r\n        },\r\n        {\r\n            title: 'Post it',\r\n            content: 'JAMstack CRUD App. Built an API serve Data, and a single page frontend consume the API',\r\n            tech: ['Backend: Node Express', 'Frontend: Html, CSS, JavaScript'],\r\n            link: 'https://heuristic-poincare-822332.netlify.app'\r\n        },\r\n        {\r\n            title: 'ToDo List',\r\n            content: 'A web app to add, delete and track toDo items, store data on local browsers.',\r\n            tech: ['JavaScript, React, LocalStorage'],\r\n            link: 'https://hnhon.github.io/todolistdemo/'\r\n        },\r\n        {\r\n            title: 'Color Game',\r\n            content: 'Play a color gussing game on your browsers',\r\n            tech: ['Backend: Node.Js, Experss.Js, EJS', 'Frontend: Html, CSS, JavaScript'],\r\n            link: 'https://hnhon.github.io/colorgame/'\r\n        }, \r\n        {\r\n            title: 'Battleship Game',\r\n            content: 'Classic Battleship game play with computer',\r\n            tech: ['Frontend: Html, CSS, JavaScript'],\r\n            link: 'https://hnhon.github.io/battleship/'\r\n        }, \r\n        {\r\n            title: 'Tic-Tac-Toe Game',\r\n            content: 'Classic Tic-Tac-Toe game play with computer',\r\n            tech: ['Frontend: Html, CSS, JavaScript'],\r\n            link: 'https://hnhon.github.io/tic-tac-toe/'\r\n        },\r\n        {\r\n            title: 'Book Library',\r\n            content: 'CRUD App',\r\n            tech: ['Frontend: Html, CSS, JavaScript'],\r\n            link: 'https://hnhon.github.io/BookLibrary-/'\r\n        }\r\n    ]\r\n    return (\r\n        <div className='portfolio' id='portfolio'>\r\n            <h2>Portfolio</h2>\r\n            <div className='cards'>\r\n                {portfolio.map(el => {\r\n                    return (\r\n                        <div className='card'>\r\n                            <div className='card-title'>{el.title}</div>\r\n                            <div className='card-content'>{el.content}</div>\r\n                            <div className='card-tech'>{el.tech.map(el => {\r\n                                return (\r\n                                    <li>\r\n                                        {el}\r\n                                    </li>\r\n                                )\r\n                            })}</div>\r\n                            <div>\r\n                                <a href={el.link} target='_blank' rel=\"noopener noreferrer\">See Live</a>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Portfolio;","import React from 'react';\r\n\r\nfunction Contact() {\r\n    return (\r\n        <div id='contact'>\r\n            <h2>Get In Touch</h2>\r\n            <p>Email: alexhnhon@gmail.com</p>\r\n            <p>\r\n            <a href='https://linkedin.com/in/hiunamhon' rel=\"noopener noreferrer\" target=\"_blank\" className='button'>Linkedin</a> \r\n            </p>\r\n            <p>\r\n            <a href='https://github.com/hnhon' rel=\"noopener noreferrer\" target=\"_blank\" className='button'>Github</a>\r\n            </p>\r\n        </div>\r\n    )    \r\n};\r\n\r\nexport default Contact;","import React from 'react';\r\n\r\nfunction Footer() {\r\n    return (\r\n        <div id='footer'>Made by Hiunam Hon</div>\r\n    )\r\n};\r\n\r\nexport default Footer;","import React from 'react';\r\nimport Navbar from './Navbar';\r\nimport About from './About';\r\nimport Portfolio from './Portfolio';\r\nimport Contact from './Contact';\r\nimport Footer from './Footer';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className='app'>\r\n      <Navbar />\r\n      <About />\r\n      <Portfolio />\r\n      <Contact />\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}